import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

buildscript {
    repositories {
        jcenter()
        maven { url 'https://plugins.gradle.org/m2/' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'org.jetbrains.kotlin', name: 'kotlin-gradle-plugin', version: '1.5.31'
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:0.9.17"
    }
}

plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.3.72'
    id 'io.codearte.nexus-staging' version '0.20.0'
    id "de.marcphilipp.nexus-publish" version '0.2.0'
}

apply plugin: 'org.jetbrains.dokka'

repositories {
    mavenCentral()
    mavenLocal()
    jcenter()
}

nexusStaging {
    packageGroup = "com.github.shynixn"
    username = project.hasProperty("ossrhUsername") ? project.findProperty("ossrhUsername") : System.getenv('SONATYPE_USERNAME')
    password = project.hasProperty("ossrhPassword") ? project.findProperty("ossrhPassword") : System.getenv('SONATYPE_PASSWORD')
    delayBetweenRetriesInMillis = 10000
    numberOfRetries = 100
}

allprojects {
    apply plugin: 'jacoco'
}

tasks.register("printVersion") {
    println(this.subprojects.getAt(0).version)
}

subprojects {
    group 'com.github.shynixn.mccoroutine'
    version '1.6.0'

    sourceCompatibility = 1.8

    apply plugin: 'kotlin-platform-jvm'
    apply plugin: 'signing'
    apply plugin: 'maven-publish'
    apply plugin: 'java-library'
    apply plugin: "de.marcphilipp.nexus-publish"

    compileKotlin {
        kotlinOptions.jvmTarget = "1.8"
    }
    compileTestKotlin {
        kotlinOptions.jvmTarget = "1.8"
    }

    jacocoTestReport {
        reports {
            xml.enabled = true
            html.enabled = false
        }
    }

    test {
        useJUnitPlatform()
        testLogging.showStandardStreams = true
        failFast = true

        testLogging {
            events(TestLogEvent.FAILED, TestLogEvent.PASSED, TestLogEvent.SKIPPED, TestLogEvent.STARTED)
            displayGranularity = 0
            showExceptions = true
            showCauses = true
            showStackTraces = true
            exceptionFormat = TestExceptionFormat.FULL
        }
    }

    task sourcesJar(type: Jar) {
        from sourceSets.main.allSource
        classifier = 'sources'
    }

    task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
        outputFormat = 'javadoc'
        outputDirectory = javadoc.destinationDir
    }

    task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                artifact sourcesJar
                artifact javadocJar
                pom {
                    name = 'MCCoroutine'
                    description = 'MCCoroutine bukkit api server extension to work with Kotlin Coroutines.'
                    url = 'https://github.com/Shynixn/MCCoroutine'
                    licenses {
                        license {
                            name = 'MIT License'
                            url = 'http://www.opensource.org/licenses/mit-license.php'
                        }
                    }
                    developers {
                        developer {
                            name = 'Shynixn'
                            url = 'https://github.com/Shynixn'
                        }
                    }
                    scm {
                        connection = 'scm:git:git://github.com/Shynixn/MCCoroutine.git'
                        developerConnection = 'scm:git:ssh://github.com:Shynixn/MCCoroutine.git'
                        url = 'http://github.com/Shynixn/MCCoroutine.git/tree/master'
                    }
                }
            }
        }
        repositories {
            maven {
                def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

                credentials {
                    username = project.hasProperty("ossrhUsername") ? project.findProperty("ossrhUsername") : System.getenv('SONATYPE_USERNAME')
                    password = project.hasProperty("ossrhPassword") ? project.findProperty("ossrhPassword") : System.getenv('SONATYPE_PASSWORD')
                }
            }
        }
    }

    signing {
        sign publishing.publications.mavenJava
    }

    repositories {
        mavenCentral()
        mavenLocal()
        jcenter()
    }

    dependencies {
        testCompile 'org.jetbrains.kotlin:kotlin-test'
        testCompile 'org.jetbrains.kotlin:kotlin-test-junit'
        testCompile 'org.junit.jupiter:junit-jupiter-api:5.3.1'
        testCompile 'org.mockito:mockito-core:2.23.0'

        testRuntime 'org.junit.jupiter:junit-jupiter-engine:5.3.1'
    }
}

gradle.taskGraph.whenReady { taskGraph ->
    if (project.findProperty("signing.keyId") == null) {
        ext."signing.keyId" = System.getenv('SIGNING_KEY_ID')
        ext."signing.password" = System.getenv('SIGNING_KEY_PASSWORD')
        ext."signing.secretKeyRingFile" = System.getenv('SIGNING_KEY_FILE')
    }
}

task generateBukkitJavaDocPages(type: org.jetbrains.dokka.gradle.DokkaTask) {
    outputFormat = 'javadoc'
    outputDirectory = "docs/apidocs/bukkit"
    sourceDirs = files(new File(this.projectDir as File, '/mccoroutine-bukkit-api/src/main/java'))
    externalDocumentationLink {
        url = new URL("https://hub.spigotmc.org/javadocs/spigot/")
        packageListUrl = new URL("https://hub.spigotmc.org/javadocs/spigot/element-list")
    }
}

task generateSpongeJavaDocPages(type: org.jetbrains.dokka.gradle.DokkaTask) {
    outputFormat = 'javadoc'
    outputDirectory = "docs/apidocs/sponge"
    sourceDirs = files(new File(this.projectDir as File, '/mccoroutine-sponge-api/src/main/java'))
}
